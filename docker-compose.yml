version: "3.9"

networks:
  stl2glb-net:
    driver: bridge

services:
  # Servizio di build che usa VCPKG dall'host
  builder:
    image: alpine:3.19
    container_name: stl2glb_builder
    volumes:
      - ./:/src:ro
      - /home/vcpkg:/vcpkg:ro
      - build_output:/output
    working_dir: /src
    command: |
      sh -c "
      set -e
      echo 'üîß Installing build dependencies...'
      apk add --no-cache build-base cmake ninja linux-headers
      
      echo 'üìÅ Creating build directory...'
      cp -r /src /build
      cd /build
      
      echo 'üî® Fixing STLParser.cpp if needed...'
      if [ -f 'src/STLParser.cpp' ]; then
        grep -q '#include <cmath>' src/STLParser.cpp || \
        sed -i '/#include <atomic>/a #include <cmath>' src/STLParser.cpp
      fi
      
      echo 'üèóÔ∏è Building with VCPKG...'
      cmake -B build -S . \
        -DCMAKE_BUILD_TYPE=MinSizeRel \
        -DCMAKE_TOOLCHAIN_FILE=/vcpkg/scripts/buildsystems/vcpkg.cmake \
        -DVCPKG_TARGET_TRIPLET=x64-linux \
        -DVCPKG_INSTALLED_DIR=/vcpkg/installed \
        -GNinja
      
      cmake --build build --config MinSizeRel --parallel
      
      echo '‚úÇÔ∏è Stripping executable...'
      strip build/stl2glb
      
      echo 'üì¶ Copying to output...'
      cp build/stl2glb /output/
      
      echo '‚úÖ Build completed!'
      "
    networks:
      - stl2glb-net

  # Servizio app che usa l'eseguibile buildato
  app:
    image: alpine:3.19
    container_name: stl2glb_app
    restart: always
    depends_on:
      builder:
        condition: service_completed_successfully
    volumes:
      - build_output:/app:ro

    # Setup iniziale e run
    command: |
      sh -c "
      echo 'üîß Installing runtime dependencies...'
      apk add --no-cache libstdc++ libgcc openssl ca-certificates
      
      echo 'üë§ Creating app user...'
      adduser -D -u 1000 -g 1000 appuser || true
      
      echo 'üöÄ Starting application...'
      exec su appuser -c '/app/stl2glb'
      "

    # Porte
    ports:
      - "9002:8080"

    # Environment da file .env
    env_file:
      - .env

    # Variabili aggiuntive
    environment:
      - MALLOC_ARENA_MAX=1
      - GOMAXPROCS=1

    # DNS
    dns:
      - 1.1.1.1
      - 8.8.8.8

    # Host esterni
    extra_hosts:
      - "minio:217.160.248.228"
      - "minio.aredegalli.it:217.160.248.228"

    # Risorse limitate
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
          pids: 100
        reservations:
          cpus: '0.1'
          memory: 128M

    # Health check
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
        compress: "true"

    # Tuning
    sysctls:
      - net.core.somaxconn=128
      - net.ipv4.tcp_fin_timeout=30
      - net.ipv4.tcp_keepalive_time=600

    # Tmpfs
    tmpfs:
      - /tmp:size=50M,noexec,nosuid,nodev

    networks:
      - stl2glb-net

volumes:
  build_output:
    driver: local