version: "3.8"

volumes:
  vcpkg_cache:
    driver: local
    driver_opts:
      type: none
      device: /home/vcpkg
      o: bind
  build_cache:
    driver: local

networks:
  stl2glb-network:
    driver: bridge

services:
  # App container con build integrato (alta performance)
  app:
    build:
      context: .
      dockerfile_inline: |
        # Multi-stage build ottimizzato per alta performance
        FROM ubuntu:22.04 AS builder
        
        # Installa dipendenze di build con cache ottimizzata
        RUN apt-get update && apt-get install -y --no-install-recommends \
            build-essential cmake git curl ca-certificates ninja-build \
            pkg-config zip unzip tar ccache && \
            apt-get clean && rm -rf /var/lib/apt/lists/*
        
        # Setup vcpkg con ottimizzazioni
        RUN git clone --depth 1 --single-branch https://github.com/Microsoft/vcpkg.git /vcpkg && \
            /vcpkg/bootstrap-vcpkg.sh -disableMetrics
        
        # Environment per alta performance
        ENV VCPKG_MAX_CONCURRENCY=6
        ENV MAKEFLAGS="-j6"
        ENV CMAKE_BUILD_PARALLEL_LEVEL=6
        ENV VCPKG_ROOT=/vcpkg
        ENV PATH="$VCPKG_ROOT:$PATH"
        ENV VCPKG_BINARY_SOURCES="clear;files,/vcpkg_cache,readwrite"
        
        # Setup ccache per build incrementali più veloci
        ENV CCACHE_DIR=/build_cache/ccache
        ENV CMAKE_CXX_COMPILER_LAUNCHER=ccache
        
        # Copia sorgenti
        COPY . /project
        WORKDIR /project
        
        # Installa dipendenze C++ con cache
        RUN --mount=type=cache,target=/vcpkg_cache \
            vcpkg install openssl nlohmann-json cpp-httplib draco --triplet x64-linux
        
        # Build ottimizzato con cache incrementale
        RUN --mount=type=cache,target=/build_cache \
            cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -GNinja && \
            cmake --build build --config Release --parallel 6
        
        # Runtime stage ultra-minimale
        FROM ubuntu:22.04 AS runtime
        
        # Installa solo runtime essenziali + curl per health check
        RUN apt-get update && apt-get install -y --no-install-recommends \
            libssl3 libcurl4 ca-certificates curl && \
            apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
        
        # Crea user non-root con shell ottimizzata
        RUN useradd -m -u 1000 -s /bin/bash appuser && \
            mkdir -p /app && \
            chown appuser:appuser /app
        
        # Ottimizzazioni per runtime performance
        ENV MALLOC_ARENA_MAX=1
        ENV MALLOC_MMAP_THRESHOLD_=65536
        ENV MALLOC_TRIM_THRESHOLD_=131072
        
        WORKDIR /app
        USER appuser
        
        # Copia eseguibile ottimizzato
        COPY --from=builder --chown=appuser:appuser /project/build/stl2glb_exec /app/
        
        # Verifica che l'eseguibile sia funzionante
        RUN /app/stl2glb_exec --version 2>/dev/null || echo "Binary ready"
        
        EXPOSE 8080
        
        # Health check integrato
        HEALTHCHECK --interval=45s --timeout=3s --start-period=10s --retries=2 \
            CMD curl -f --connect-timeout 2 http://localhost:8080/health || exit 1
        
        # Entry point ottimizzato
        ENTRYPOINT ["/app/stl2glb_exec"]

    container_name: stl2glb_app

    # Monta cache per build incrementali
    volumes:
      - vcpkg_cache:/vcpkg_cache
      - build_cache:/build_cache

    # DNS ultra-veloci
    dns:
      - 1.1.1.1
      - 8.8.8.8
      - 8.8.4.4

    ports:
      - "9002:8080"

    restart: unless-stopped

    env_file:
      - .env

    # Host fissi per DNS zero-latency
    extra_hosts:
      - "minio:217.160.248.228"
      - "minio.aredegalli.it:217.160.248.228"

    # Configurazione risorse alta performance ma efficiente
    deploy:
      resources:
        limits:
          cpus: '3'        # Aumentato per build veloci
          memory: 1G     # Aumentato per vcpkg + build
        reservations:
          cpus: '1'        # Garantisce sempre 1 CPU
          memory: 384M     # Memory garantita

    # Security ottimizzata
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=128M,rw  # Più spazio per performance

    # Logging performance-oriented
    logging:
      driver: "json-file"
      options:
        max-size: "8m"
        max-file: "2"
        compress: "true"

    # Ottimizzazioni di rete
    sysctls:
      - net.core.somaxconn=65535
      - net.ipv4.tcp_tw_reuse=1

    networks:
      - stl2glb-network

  # Health monitor leggero ma efficace
  health-monitor:
    image: alpine:3.18
    container_name: stl2glb_monitor
    command: >
      sh -c "
      apk add --no-cache curl && \
      echo 'Health monitor started' && \
      while true; do
        if ! curl -sf --connect-timeout 1 --max-time 3 http://app:8080/health >/dev/null 2>&1; then
          echo '❌ Health check failed at' \$(date '+%Y-%m-%d %H:%M:%S');
        else
          echo '✅ Service healthy at' \$(date '+%Y-%m-%d %H:%M:%S');
        fi;
        sleep 45;
      done
      "
    depends_on:
      - app
    networks:
      - stl2glb-network
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 24M
        reservations:
          cpus: '0.05'
          memory: 16M
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "1"

# Configurazioni globali per alta performance
x-common-variables: &common-variables
  TZ: UTC
  MALLOC_ARENA_MAX: 1
  MALLOC_MMAP_THRESHOLD_: 65536