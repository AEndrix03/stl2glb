version: "3.8"

volumes:
  vcpkg_cache:
    driver: local
    driver_opts:
      type: none
      device: /home/vcpkg
      o: bind
  build_cache:
    driver: local

networks:
  stl2glb-network:
    driver: bridge

services:
  # Builder con risorse ridotte
  builder:
    image: ubuntu:22.04
    container_name: stl2glb_builder
    volumes:
      - ./:/project
      - vcpkg_cache:/vcpkg_cache
      - build_cache:/build_cache
    working_dir: /project
    environment:
      # Ridotte per VPS limitata
      VCPKG_MAX_CONCURRENCY: "2"
      VCPKG_BINARY_SOURCES: "clear;files,/vcpkg_cache,readwrite"
      MAKEFLAGS: "-j2"  # Ridotto da 8 a 2
      CMAKE_BUILD_PARALLEL_LEVEL: "2"
    command: >
      bash -c "
      # Installa dipendenze minime
      apt-get update && apt-get install -y --no-install-recommends \
        build-essential cmake git curl ca-certificates ninja-build \
        pkg-config zip unzip tar && \
      
      # Setup vcpkg se non esiste
      if [ ! -d /vcpkg_cache/vcpkg ]; then
        git clone --depth 1 https://github.com/Microsoft/vcpkg.git /vcpkg_cache/vcpkg && \
        /vcpkg_cache/vcpkg/bootstrap-vcpkg.sh -disableMetrics;
      fi && \
      
      # Installa dipendenze con vcpkg (con cache)
      export VCPKG_ROOT=/vcpkg_cache/vcpkg && \
      export PATH=\$VCPKG_ROOT:\$PATH && \
      vcpkg install openssl nlohmann-json cpp-httplib draco --triplet x64-linux && \
      
      # Build ottimizzata ma con meno parallelismo
      cmake -B build -S . \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_TOOLCHAIN_FILE=\$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake \
        -GNinja && \
      cmake --build build --config Release --parallel 2 && \
      
      # Cleanup aggressivo
      apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
      "
    networks:
      - stl2glb-network
    deploy:
      resources:
        limits:
          cpus: '2'      # Ridotto da 4
          memory: 768M   # Ridotto da 1G
        reservations:
          cpus: '1'      # Ridotto da 2
          memory: 512M   # Ridotto da 1G

  # App container ultra-minimale
  app:
    build:
      context: .
      dockerfile_inline: |
        FROM ubuntu:22.04 AS runtime
        
        # Installa solo runtime dependencies
        RUN apt-get update && apt-get install -y --no-install-recommends \
          libssl3 libcurl4 ca-certificates && \
          apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
        
        # Crea user non-root
        RUN useradd -m -u 1000 -s /bin/bash appuser
        
        FROM runtime
        
        WORKDIR /app
        
        # Copia solo l'eseguibile
        COPY --from=builder /project/build/stl2glb_exec /app/
        
        # Cambia ownership
        RUN chown -R appuser:appuser /app
        
        USER appuser
        
        EXPOSE 8080
        
        # Usa exec form per segnali corretti
        ENTRYPOINT ["/app/stl2glb_exec"]

    container_name: stl2glb_app
    depends_on:
      builder:
        condition: service_completed_successfully

    # DNS ottimizzato
    dns:
      - 8.8.8.8
      - 1.1.1.1

    ports:
      - "9002:8080"

    restart: unless-stopped

    env_file:
      - .env

    # Host fissi per evitare lookup DNS
    extra_hosts:
      - "minio:217.160.248.228"
      - "minio.aredegalli.it:217.160.248.228"

    # Health check meno frequente
    healthcheck:
      test: ["CMD", "curl", "-f", "--connect-timeout", "2", "http://localhost:8080/health"]
      interval: 60s      # Aumentato da 30s
      timeout: 5s        # Aumentato da 3s
      retries: 2         # Ridotto da 3
      start_period: 15s  # Aumentato da 10s

    # Risorse molto ridotte
    deploy:
      resources:
        limits:
          cpus: '1'      # Ridotto da 2
          memory: 512M   # Ridotto da 1G
        reservations:
          cpus: '0.25'   # Ridotto da 0.5
          memory: 128M   # Ridotto da 256M

    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50M  # Ridotto da 100M

    # Logging ridotto
    logging:
      driver: "json-file"
      options:
        max-size: "5m"    # Ridotto da 10m
        max-file: "2"     # Ridotto da 3
        compress: "true"

    networks:
      - stl2glb-network

  # Health monitor piÃ¹ leggero (opzionale - puoi commentarlo)
  # health-monitor:
  #   image: alpine:3.18
  #   container_name: stl2glb_monitor
  #   command: >
  #     sh -c "
  #     apk add --no-cache curl && \
  #     while true; do
  #       if ! curl -sf http://app:8080/health > /dev/null 2>&1; then
  #         echo 'Health check failed at' \$(date);
  #       fi;
  #       sleep 60;  # Aumentato da 30s
  #     done
  #     "
  #   depends_on:
  #     - app
  #   networks:
  #     - stl2glb-network
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.05'   # Ridotto da 0.1
  #         memory: 16M    # Ridotto da 32M

# Configurazione globale per performance su VPS limitata
x-common-variables: &common-variables
  TZ: UTC
  MALLOC_ARENA_MAX: 1  # Ridotto da 2