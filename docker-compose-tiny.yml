# Docker Compose multi-stage per stl2glb
# Stage 1: Builder con vcpkg
# Stage 2: Runtime minimale

volumes:
  vcpkg_cache:
    driver: local
    driver_opts:
      type: none
      device: /home/vcpkg
      o: bind

networks:
  stl2glb-network:
    driver: bridge

services:
  # Stage 1: Builder
  builder:
    image: alpine:3.19
    container_name: stl2glb_builder
    volumes:
      - ./:/project
      - vcpkg_cache:/vcpkg:ro
    working_dir: /project
    command: >
      sh -c "
      echo 'üîß Installazione build tools...' &&
      apk add --no-cache build-base cmake ninja linux-headers &&
      echo 'üîç Verifica vcpkg...' &&
      ls -la /vcpkg/ &&
      if [ ! -f '/vcpkg/vcpkg' ]; then
        echo '‚ùå vcpkg non trovato in /home/vcpkg';
        echo 'üîß Esegui prima: ./setup-vcpkg.sh';
        exit 1;
      fi &&
      if [ ! -d '/vcpkg/installed/x64-linux' ]; then
        echo '‚ùå dipendenze vcpkg x64-linux non installate';
        echo 'üì¶ Directory installed disponibili:';
        ls -la /vcpkg/installed/ 2>/dev/null || echo 'Directory installed non trovata';
        exit 1;
      fi &&
      echo 'üîç Controllo librerie debug problematiche...' &&
      if [ -d '/vcpkg/installed/x64-linux/debug' ]; then
        echo '‚ö†Ô∏è  Librerie debug trovate - potrebbero causare problemi';
        echo 'üìã Contenuto debug:';
        ls -la /vcpkg/installed/x64-linux/debug/lib/ | head -3 || true;
      fi &&
      echo '‚úÖ vcpkg verificato' &&
      echo 'üî® Fix per Linux se necessario...' &&
      if [ -f 'src/STLParser.cpp' ]; then
        grep -q '#include <cmath>' src/STLParser.cpp ||
        sed -i '/#include <atomic>/a #include <cmath>' src/STLParser.cpp;
      fi &&
      echo 'üèóÔ∏è  Build con vcpkg...' &&
      echo 'üîç Debug vcpkg paths:' &&
      echo 'VCPKG_INSTALLED_DIR:' && ls -la /vcpkg/installed/x64-linux/lib/ | head -5 &&
      echo 'üßπ Pulizia cache CMake...' &&
      rm -rf build/ &&
      echo 'üîß Impostazione variabili vcpkg...' &&
      export VCPKG_ROOT=/vcpkg &&
      export VCPKG_DEFAULT_TRIPLET=x64-linux &&
      cmake -B build -S . -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_TOOLCHAIN_FILE=/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-linux -DVCPKG_INSTALLED_DIR=/vcpkg/installed -DVCPKG_MANIFEST_MODE=OFF -DVCPKG_APPLOCAL_DEPS=OFF -GNinja &&
      cmake --build build --config MinSizeRel --parallel \$(nproc) &&
      strip build/stl2glb_exec &&
      echo '‚úÖ Build completato'
      "
    networks:
      - stl2glb-network

  # Stage 2: Runtime minimale
  app:
    image: alpine:3.19
    container_name: stl2glb_tiny
    depends_on:
      builder:
        condition: service_completed_successfully
    volumes:
      - ./:/project:ro
    working_dir: /project
    command: >
      sh -c "
      echo 'üîß Installazione runtime libraries...' &&
      apk add --no-cache libstdc++ libgcc openssl ca-certificates wget &&
      adduser -D -u 1000 appuser &&
      echo 'üîç Verifica eseguibile...' &&
      if [ ! -f 'build/stl2glb_exec' ]; then
        echo '‚ùå Eseguibile non trovato. Builder fallito?';
        exit 1;
      fi &&
      echo '‚úÖ Eseguibile trovato' &&
      echo 'üöÄ Avvio applicazione...' &&
      su appuser -c './build/stl2glb_exec'
      "
    ports:
      - "9002:8080"
    restart: unless-stopped

    env_file:
      - .env

    environment:
      - MALLOC_ARENA_MAX=1
      - GOMAXPROCS=1

    # DNS ottimizzato
    dns:
      - 127.0.0.1
      - 1.1.1.1
      - 8.8.8.8

    # Host esterni
    extra_hosts:
      - "minio:217.160.248.228"
      - "minio.aredegalli.it:217.160.248.228"

    # Risorse limitate per VPS
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
          pids: 50
        reservations:
          cpus: '0.1'
          memory: 64M

    # Health check
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 2
      start_period: 20s

    # Logging ottimizzato
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "1"
        compress: "true"

    # Tuning di rete
    sysctls:
      - net.core.somaxconn=128
      - net.ipv4.tcp_fin_timeout=30
      - net.ipv4.tcp_keepalive_time=600

    # Tmpfs per file temporanei
    tmpfs:
      - /tmp:size=50M,noexec,nosuid,nodev

    networks:
      - stl2glb-network