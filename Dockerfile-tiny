# Dockerfile con bind mount di vcpkg
# syntax=docker/dockerfile:1.4

FROM alpine:3.19 AS builder

# Installa build tools
RUN apk add --no-cache \
    build-base \
    cmake \
    ninja \
    linux-headers

# Working directory
WORKDIR /build

# Dockerfile con bind mount di vcpkg
# syntax=docker/dockerfile:1.4
# IMPORTANTE: Richiede DOCKER_BUILDKIT=1

FROM alpine:3.19 AS builder

# Installa build tools
RUN apk add --no-cache \
    build-base \
    cmake \
    ninja \
    linux-headers

# Working directory
WORKDIR /build

# Usa bind mount per vcpkg dall'host
RUN --mount=type=bind,source=/opt/vcpkg,target=/vcpkg,readonly \
    echo "🔍 Verifica vcpkg mount..." && \
    ls -la /vcpkg/ && \
    if [ ! -f "/vcpkg/vcpkg" ]; then \
        echo "❌ vcpkg eseguibile non trovato in /opt/vcpkg"; \
        echo "🔧 Verifica che vcpkg sia installato correttamente"; \
        exit 1; \
    fi && \
    if [ ! -d "/vcpkg/installed/x64-linux" ]; then \
        echo "❌ dipendenze vcpkg x64-linux non installate"; \
        echo "📦 Directory installed disponibili:"; \
        ls -la /vcpkg/installed/ 2>/dev/null || echo "Directory installed non trovata"; \
        echo "🔧 Esegui: cd /opt/vcpkg && ./vcpkg install --triplet=x64-linux nlohmann-json httplib openssl"; \
        exit 1; \
    fi && \
    echo "✅ vcpkg verificato correttamente" && \
    echo "📦 Copiando vcpkg nel container..." && \
    cp -r /vcpkg /tmp/vcpkg && \
    echo "✅ vcpkg copiato"

# Copia sorgenti del progetto
COPY . .

# Fix per Linux se necessario
RUN if [ -f "src/STLParser.cpp" ]; then \
    grep -q "#include <cmath>" src/STLParser.cpp || \
    sed -i '/#include <atomic>/a #include <cmath>' src/STLParser.cpp; \
    fi

# Build ottimizzata
RUN cmake -B build -S . \
    -DCMAKE_BUILD_TYPE=MinSizeRel \
    -DCMAKE_TOOLCHAIN_FILE=/tmp/vcpkg/scripts/buildsystems/vcpkg.cmake \
    -DVCPKG_TARGET_TRIPLET=x64-linux \
    -DVCPKG_INSTALLED_DIR=/tmp/vcpkg/installed \
    -GNinja && \
    cmake --build build --config MinSizeRel --parallel $(nproc) && \
    strip build/stl2glb_exec

# Stage 2: Runtime minimale
FROM alpine:3.19

# Installa librerie runtime e wget per health check
RUN apk add --no-cache \
    libstdc++ \
    libgcc \
    openssl \
    ca-certificates \
    wget && \
    adduser -D -u 1000 appuser

WORKDIR /app
USER appuser

# Copia eseguibile
COPY --from=builder --chown=appuser:appuser /build/build/stl2glb_exec /app/

EXPOSE 8080
ENTRYPOINT ["/app/stl2glb_exec"]