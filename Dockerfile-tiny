# Dockerfile-tiny-fast - Build veloce usando vcpkg pre-installato sull'host
# Richiede: VCPKG_HOST_DIR=/opt/vcpkg come build arg

# Stage 1: Builder con vcpkg copiato dall'host
FROM alpine:3.19 AS builder

# Argomento per il percorso vcpkg
ARG VCPKG_HOST_DIR=/opt/vcpkg

# Installa solo build tools (no vcpkg)
RUN apk add --no-cache \
    build-base \
    cmake \
    ninja \
    linux-headers

# Copia vcpkg pre-installato dall'host
# Questo avviene durante il build, non runtime
COPY --from=host ${VCPKG_HOST_DIR} /vcpkg

# Working directory
WORKDIR /build

# Copia sorgenti
COPY . .

# Fix per Linux
RUN grep -q "#include <cmath>" src/STLParser.cpp || \
    sed -i '/#include <atomic>/a #include <cmath>' src/STLParser.cpp

# Build ottimizzata
RUN cmake -B build -S . \
    -DCMAKE_BUILD_TYPE=MinSizeRel \
    -DCMAKE_TOOLCHAIN_FILE=/vcpkg/scripts/buildsystems/vcpkg.cmake \
    -DVCPKG_TARGET_TRIPLET=x64-linux \
    -DVCPKG_INSTALLED_DIR=/vcpkg/installed \
    -GNinja && \
    cmake --build build --config MinSizeRel --parallel $(nproc) && \
    strip build/stl2glb_exec

# Stage 2: Runtime minimale
FROM alpine:3.19

# Installa solo librerie runtime essenziali
RUN apk add --no-cache \
    libstdc++ \
    libgcc \
    openssl \
    ca-certificates && \
    adduser -D -u 1000 appuser

WORKDIR /app
USER appuser

# Copia eseguibile
COPY --from=builder --chown=appuser:appuser /build/build/stl2glb_exec /app/

EXPOSE 8080
ENTRYPOINT ["/app/stl2glb_exec"]