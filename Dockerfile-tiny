# Dockerfile-tiny-fast - Build veloce usando vcpkg pre-installato dall'host
# Richiede: vcpkg installato nel sistema host in /opt/vcpkg

FROM alpine:3.19 AS builder

# Installa solo build tools (no vcpkg)
RUN apk add --no-cache \
    build-base \
    cmake \
    ninja \
    linux-headers

# Working directory
WORKDIR /build

# Copia vcpkg dall'host (deve essere montato come volume)
# Questo richiede un mount bind durante il build
# docker build --build-arg VCPKG_ROOT=/opt/vcpkg -v /opt/vcpkg:/vcpkg:ro .

# Verifica che vcpkg sia disponibile
RUN if [ ! -d "/vcpkg" ]; then \
    echo "ERRORE: vcpkg non trovato. Monta /opt/vcpkg come volume durante il build"; \
    exit 1; \
    fi

# Copia sorgenti
COPY . .

# Fix per Linux se necessario
RUN if [ -f "src/STLParser.cpp" ]; then \
    grep -q "#include <cmath>" src/STLParser.cpp || \
    sed -i '/#include <atomic>/a #include <cmath>' src/STLParser.cpp; \
    fi

# Build ottimizzata
RUN cmake -B build -S . \
    -DCMAKE_BUILD_TYPE=MinSizeRel \
    -DCMAKE_TOOLCHAIN_FILE=/vcpkg/scripts/buildsystems/vcpkg.cmake \
    -DVCPKG_TARGET_TRIPLET=x64-linux \
    -DVCPKG_INSTALLED_DIR=/vcpkg/installed \
    -GNinja && \
    cmake --build build --config MinSizeRel --parallel $(nproc) && \
    strip build/stl2glb_exec

# Stage 2: Runtime minimale
FROM alpine:3.19

# Installa solo librerie runtime essenziali
RUN apk add --no-cache \
    libstdc++ \
    libgcc \
    openssl \
    ca-certificates && \
    adduser -D -u 1000 appuser

WORKDIR /app
USER appuser

# Copia eseguibile
COPY --from=builder --chown=appuser:appuser /build/build/stl2glb_exec /app/

EXPOSE 8080
ENTRYPOINT ["/app/stl2glb_exec"]