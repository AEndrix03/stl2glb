# Dockerfile-tiny - Usa vcpkg da volume mount
# Il mount viene gestito da docker-compose

FROM alpine:3.19 AS vcpkg-prep

# Copia vcpkg dall'host tramite volume mount
RUN mkdir -p /vcpkg-temp

FROM alpine:3.19 AS builder

# Installa build tools
RUN apk add --no-cache \
    build-base \
    cmake \
    ninja \
    linux-headers

# Working directory
WORKDIR /build

# Copia tutto il progetto (escluso vcpkg per ora)
COPY . .

# Verifica se vcpkg è già presente nel context
RUN if [ -d "vcpkg" ]; then \
        echo "✅ vcpkg trovato nel build context"; \
        cp -r vcpkg /vcpkg; \
    else \
        echo "❌ vcpkg non trovato nel build context"; \
        echo "🔧 Questo build richiede vcpkg preparato"; \
        exit 1; \
    fi

# Verifica vcpkg
RUN if [ ! -f "/vcpkg/vcpkg" ]; then \
        echo "❌ vcpkg non eseguibile"; \
        exit 1; \
    fi && \
    if [ ! -d "/vcpkg/installed/x64-linux" ]; then \
        echo "❌ dipendenze vcpkg x64-linux non trovate"; \
        echo "📦 Contenuto vcpkg/installed:"; \
        ls -la /vcpkg/installed/ 2>/dev/null || echo "Directory installed non trovata"; \
        exit 1; \
    fi && \
    echo "✅ vcpkg verificato" && \
    echo "📦 Dipendenze disponibili:" && \
    ls -la /vcpkg/installed/x64-linux/lib/ 2>/dev/null || echo "Lib directory non trovata"

# Fix per Linux se necessario
RUN if [ -f "src/STLParser.cpp" ]; then \
    grep -q "#include <cmath>" src/STLParser.cpp || \
    sed -i '/#include <atomic>/a #include <cmath>' src/STLParser.cpp; \
    fi

# Build ottimizzata
RUN cmake -B build -S . \
    -DCMAKE_BUILD_TYPE=MinSizeRel \
    -DCMAKE_TOOLCHAIN_FILE=/vcpkg/scripts/buildsystems/vcpkg.cmake \
    -DVCPKG_TARGET_TRIPLET=x64-linux \
    -DVCPKG_INSTALLED_DIR=/vcpkg/installed \
    -GNinja && \
    cmake --build build --config MinSizeRel --parallel $(nproc) && \
    strip build/stl2glb_exec

# Stage 2: Runtime minimale
FROM alpine:3.19

# Installa librerie runtime e wget per health check
RUN apk add --no-cache \
    libstdc++ \
    libgcc \
    openssl \
    ca-certificates \
    wget && \
    adduser -D -u 1000 appuser

WORKDIR /app
USER appuser

# Copia eseguibile
COPY --from=builder --chown=appuser:appuser /build/build/stl2glb_exec /app/

EXPOSE 8080
ENTRYPOINT ["/app/stl2glb_exec"]