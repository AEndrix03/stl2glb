# Dockerfile-tiny-fast - Build veloce usando vcpkg pre-installato dall'host
# syntax=docker/dockerfile:1.4

FROM alpine:3.19 AS builder

# Argomenti per vcpkg
ARG VCPKG_ROOT=/opt/vcpkg

# Installa build tools
RUN apk add --no-cache \
    build-base \
    cmake \
    ninja \
    linux-headers \
    git \
    bash \
    curl \
    zip \
    unzip \
    tar \
    pkg-config

# Installa vcpkg se non Ã¨ disponibile come mount
RUN --mount=type=bind,source=/opt/vcpkg,target=/host-vcpkg,ro \
    if [ -d "/host-vcpkg" ] && [ -f "/host-vcpkg/vcpkg" ]; then \
        echo "Usando vcpkg dall'host..."; \
        cp -r /host-vcpkg /vcpkg; \
    else \
        echo "Installando vcpkg da zero..."; \
        git clone --depth 1 https://github.com/Microsoft/vcpkg.git /vcpkg && \
        /vcpkg/bootstrap-vcpkg.sh && \
        /vcpkg/vcpkg install --triplet=x64-linux --clean-after-build \
        nlohmann-json httplib openssl; \
    fi

# Working directory
WORKDIR /build

# Copia sorgenti
COPY . .

# Fix per Linux se necessario
RUN if [ -f "src/STLParser.cpp" ]; then \
    grep -q "#include <cmath>" src/STLParser.cpp || \
    sed -i '/#include <atomic>/a #include <cmath>' src/STLParser.cpp; \
    fi

# Build ottimizzata
RUN cmake -B build -S . \
    -DCMAKE_BUILD_TYPE=MinSizeRel \
    -DCMAKE_TOOLCHAIN_FILE=/vcpkg/scripts/buildsystems/vcpkg.cmake \
    -DVCPKG_TARGET_TRIPLET=x64-linux \
    -DVCPKG_INSTALLED_DIR=/vcpkg/installed \
    -GNinja && \
    cmake --build build --config MinSizeRel --parallel $(nproc) && \
    strip build/stl2glb_exec

# Stage 2: Runtime minimale
FROM alpine:3.19

# Installa librerie runtime e wget per health check
RUN apk add --no-cache \
    libstdc++ \
    libgcc \
    openssl \
    ca-certificates \
    wget && \
    adduser -D -u 1000 appuser

WORKDIR /app
USER appuser

# Copia eseguibile
COPY --from=builder --chown=appuser:appuser /build/build/stl2glb_exec /app/

EXPOSE 8080
ENTRYPOINT ["/app/stl2glb_exec"]