# Dockerfile-tiny - RICHIEDE vcpkg pre-installato in /opt/vcpkg
# NON installa vcpkg automaticamente - fallisce se non presente
# syntax=docker/dockerfile:1.4

FROM alpine:3.19 AS builder

# Installa solo build tools essenziali
RUN apk add --no-cache \
    build-base \
    cmake \
    ninja \
    linux-headers

# Working directory
WORKDIR /build

# CONTROLLO OBBLIGATORIO: vcpkg deve essere presente nell'host
# Questo comando fallisce immediatamente se /opt/vcpkg non esiste
RUN --mount=type=bind,source=/opt/vcpkg,target=/vcpkg,ro \
    if [ ! -d "/vcpkg" ]; then \
        echo "‚ùå ERRORE: vcpkg non trovato in /opt/vcpkg"; \
        echo "üîß SETUP RICHIESTO: Esegui prima il setup di vcpkg"; \
        echo "   sudo mkdir -p /opt && cd /opt"; \
        echo "   sudo git clone https://github.com/Microsoft/vcpkg.git"; \
        echo "   sudo chown -R \$USER:\$USER /opt/vcpkg"; \
        echo "   cd /opt/vcpkg && ./bootstrap-vcpkg.sh"; \
        echo "   ./vcpkg install --triplet=x64-linux nlohmann-json httplib openssl"; \
        exit 1; \
    fi && \
    if [ ! -f "/vcpkg/vcpkg" ]; then \
        echo "‚ùå ERRORE: vcpkg non inizializzato correttamente"; \
        echo "üîß ESEGUI: cd /opt/vcpkg && ./bootstrap-vcpkg.sh"; \
        exit 1; \
    fi && \
    if [ ! -d "/vcpkg/installed/x64-linux" ]; then \
        echo "‚ùå ERRORE: dipendenze vcpkg non installate"; \
        echo "üîß ESEGUI: cd /opt/vcpkg && ./vcpkg install --triplet=x64-linux nlohmann-json httplib openssl"; \
        exit 1; \
    fi && \
    echo "‚úÖ vcpkg verificato correttamente" && \
    # Copia vcpkg nel container per il build
    cp -r /vcpkg /tmp/vcpkg

# Copia sorgenti
COPY . .

# Fix per Linux se necessario
RUN if [ -f "src/STLParser.cpp" ]; then \
    grep -q "#include <cmath>" src/STLParser.cpp || \
    sed -i '/#include <atomic>/a #include <cmath>' src/STLParser.cpp; \
    fi

# Build ottimizzata
RUN cmake -B build -S . \
    -DCMAKE_BUILD_TYPE=MinSizeRel \
    -DCMAKE_TOOLCHAIN_FILE=/tmp/vcpkg/scripts/buildsystems/vcpkg.cmake \
    -DVCPKG_TARGET_TRIPLET=x64-linux \
    -DVCPKG_INSTALLED_DIR=/tmp/vcpkg/installed \
    -GNinja && \
    cmake --build build --config MinSizeRel --parallel $(nproc) && \
    strip build/stl2glb_exec

# Stage 2: Runtime minimale
FROM alpine:3.19

# Installa librerie runtime e wget per health check
RUN apk add --no-cache \
    libstdc++ \
    libgcc \
    openssl \
    ca-certificates \
    wget && \
    adduser -D -u 1000 appuser

WORKDIR /app
USER appuser

# Copia eseguibile
COPY --from=builder --chown=appuser:appuser /build/build/stl2glb_exec /app/

EXPOSE 8080
ENTRYPOINT ["/app/stl2glb_exec"]